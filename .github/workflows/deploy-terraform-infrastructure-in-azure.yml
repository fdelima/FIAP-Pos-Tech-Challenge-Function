name: Terraform In Azure with User-assigned Managed Identity 

on:
  push:
    branches: [ "feature/pipeline" ]
  pull_request: 
    branches: [ "develop", "main" ]

permissions:
  id-token: write
  contents: read    

jobs:
  deploy-terraform-infrastructure-in-azure:
    runs-on: self-hosted    
    #environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    #defaults:
      #run:
        #shell: bash
        #working-directory: './Src/Azure/Infra'
        
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          auth-type: IDENTITY
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
        
      - name: Terraform
        run: terraform --help
        
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Directory
        run: cd ./Src/Azure/Infra
        
      - name: List files in the repository
        run: |
            ls
        
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
  
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
  
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
  
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false
  
        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
